//INCLUSION DE LIBRERIAS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "conio.h"
#include "string.h"
#include <iostream>
#include <string>
#include "Funciones.h"

//FUNCION MAIN
int main()
{
	int num = 0;//VARIABLE AUXILIAR QUE ALMACENARA LA CANTIDAD DE COLUMNAS Y FILAS (MATRIZ CUADRADA, POR LO TANTO, FILAS=COLUMNAS)
	int jugador = -1; //INDICA EL JUGADOR AL QUE LE TOCA JUGAR. 0 JUEGA USUARIO PRICIPAL Y 1 JUEGA COMPUTADORA O USUARIO SECUNDARIO (DEPENDE CASO) 
	int total_jugadas = 0; //NUMERO DE JUGADA QUE SE VA HACIENDO. EN LAS PARES JUEGA EL USUARIO Y EN LAS IMPARES LA COMPUTADORA. SIEMPRE EMPIEZA JUGANDO EL USUARIO
	int cantidad_jug = 0;//VARIABLE AUXILIAR ALMACEN LA CANTIDAD DE JUGADORES RETORNADA POR LA FUNCION LEER ARCHIVO
	int memoria = 100;//VARABLE AUXILIAR QUE ALMACENA TAMAÑO DE MEMORIA INICIAL DEL ARRAY DE JUGADORES
	int resultado = 0;//VARIABLE AUXILIAR PARA ALMACENAR EL RESULTADO DE QUIEN GANO
	int posicion1 = -1;//VARABLE AUXILIAR QUE ALMACENA LA POSICION DEL USUARIO, QUE ESTA JUGANDO, EN LA LISTA
	int posicion2 = -1;//VARABLE AUXILIAR QUE ALMACENA LA POSICION DEL USUARIO, QUE ESTA JUGANDO, EN LA LISTA
	int opcion2 = 0;//VARIABLE AUXILIAR QUE ALMACENA EL VALOR QUE RETORNA EL MENU 2 QUE SE UTILIZA MAS ADELANTE EN LA INSTRUCCION DO-WHILE PARA SABER SI
	int error = 0;//VARIALE AUXILIAR QUE ALMACENA RETORNO DE VALOR NO ERROR O ERROR
	int opcion = 0;//VARIABLE AUXILIAR QUE ALMACENA OPCION ELEGIDAD POR USUARIO EN MENU 2, JUEGA CONTRA COMPUTADORA O CONTRA OTRO USUARIO
	
	//CREACION INCIAL DE TABLERO E INICIALIZACION
	char** tablero = crear_tablero_random(num);//DECLARAMOS TABLERO COMO DOBLE PUNTERO DE TIPO CHAR Y CREAMOS MATRIZ CUADRADA ASIGNANDOLE MEMORIA CON MEMORIA DINAMICA 

	//CREACION DE LISTA 
	s_listaJugadores lista;//DECLARAMOS LISTA DE USUARIOS DE TIPO s_listaJugadores, ESTRUCTURA QUE CONTIENE LOS DATOS DE LOS  JUGADORES
	lista.n_jugadores = 0;//INICIALIZO EN 0 LA CANTIDAD DE JUGADORES INICIAL DE LA LISTA PARA EVITAR ERRORES
	lista.tam = 0;//INICIALIZO EN 0 LA CANTIDAD DE TAMAÑO DE ESPACIO INICIAL DE LA LISTA PARA EVITAR ERRORES
    lista.arr_jugadores = new Jugador[memoria];//ASIGNAMOS MEMORIA DINAMICA CON EL TAMAÑO DE VARIABLE MEMORIA
	lista.tam = memoria;//INICALIZAMOS LA VARABLE TAMAÑO EN LA LISTA CON EL VALOR DE LA VARAIBLE MEMORIA
	
    //CREACION, LECTURA DE ARCHIVO
	lista.n_jugadores = leerarchivo(lista);//FUNCION LEER ARCHIVO DEVUELVE LA CANTIDAD DE JUGADORES EN EL Y SE INICALIZA A LA VARIABLE N_JUGADORES EN LA LISTA CON ESE VALOR
	if (lista.n_jugadores == 0)//INSTRUCCION IF SI LEER ARCHIVO RETORNA 0 (CANTIDAD DE JUGADORES REGISTRADOS), ENTONCES EL ARCHIVO NO EXISTE O ESTA VACIO Y LO CREAMOS
	{
		error = creararchivo();//FUNCION CREAR ARCHIVO, ABRE EL ARCHIVO SINO EXISTE LO CREA
	}
	
	//COMIENZO DEL JUEGO
	//FUNCION MENU 1
	menu1(lista, posicion1, memoria,posicion2,opcion);

	//INSTRUCCION DO-WHILE SE REPITE HASTA QUE EL USUARIO INDIQUE EN LA FUNCION MENU 2 QUE QUIERE SALIR DEL JUEGO
	do {
		opcion2 = menu2(lista, posicion1, tablero, total_jugadas, num, jugador, resultado, opcion2, posicion2,memoria);//FUNCION MENU 2, EL USUARIO ELIGE QUE QUIERE HACER, JUGAR IMPRIMIR LISTA O SSALIR DLE JUEGO 
		borrar_tablero(tablero, num);//FUNCION BORRAR PARA LIBERAR MEMORIA DEL TABLERO DINAMICO
		tablero = crear_tablero_random(num);//DECLARAMOS TABLERO COMO DOBLE PUNTERO DE TIPO CHAR Y CREAMOS MATRIZ CUADRADA ASIGNANDOLE MEMORIA CON MEMORIA DINAMICA 
		posicion2 = -1;//REGRESO POSICION 2 A -1 PARA EVITAR SOBRE ESCRITURA DE DATOS
	} while (opcion2 != SALIR);//CONDICION DE SALIDA HASTA QUE EL USUARIO ELIJA LA OPCION SALIR EN EL MANU 2
	

	system("Pause");//INSTRUCCION SYSTEM PAUSE PARA DETENER EL PROGRAMA HASTA QUE EL USUARIO PRESIONE CUALQUIER TECLA
	borrar_tablero(tablero, num);//FUNCION BORRAR PARA LIBERAR MEMORIA DEL TABLERO DINAMICO
	error = guardararchivo(lista);//FUNCION GUARDAR LISTA DE JUGADORES EN ARCHIVO

	delete lista.arr_jugadores;//INSTRUCCION PARA LIBERAR MEMORIA PEDIDIDA EN EL ARRAY DINAMICO

	return  0;//RETORNO DE VALOR 0
}
